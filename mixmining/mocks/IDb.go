// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/nymtech/nym/validator/nym/models"
	mock "github.com/stretchr/testify/mock"
)

// IDb is an autogenerated mock type for the IDb type
type IDb struct {
	mock.Mock
}

// ActiveTopology provides a mock function with given fields: reputationThreshold
func (_m *IDb) ActiveTopology(reputationThreshold int64) models.Topology {
	ret := _m.Called(reputationThreshold)

	var r0 models.Topology
	if rf, ok := ret.Get(0).(func(int64) models.Topology); ok {
		r0 = rf(reputationThreshold)
	} else {
		r0 = ret.Get(0).(models.Topology)
	}

	return r0
}

// AddMixStatus provides a mock function with given fields: _a0
func (_m *IDb) AddMixStatus(_a0 models.PersistedMixStatus) {
	_m.Called(_a0)
}

// BatchAddMixStatus provides a mock function with given fields: status
func (_m *IDb) BatchAddMixStatus(status []models.PersistedMixStatus) {
	_m.Called(status)
}

// BatchLoadReports provides a mock function with given fields: pubkeys
func (_m *IDb) BatchLoadReports(pubkeys []string) models.BatchMixStatusReport {
	ret := _m.Called(pubkeys)

	var r0 models.BatchMixStatusReport
	if rf, ok := ret.Get(0).(func([]string) models.BatchMixStatusReport); ok {
		r0 = rf(pubkeys)
	} else {
		r0 = ret.Get(0).(models.BatchMixStatusReport)
	}

	return r0
}

// BatchMoveToRemovedSet provides a mock function with given fields: pubkeys
func (_m *IDb) BatchMoveToRemovedSet(pubkeys []string) {
	_m.Called(pubkeys)
}

// BatchUpdateReputation provides a mock function with given fields: reputationChangeMap
func (_m *IDb) BatchUpdateReputation(reputationChangeMap map[string]int64) {
	_m.Called(reputationChangeMap)
}

// GetNMostRecentMixStatuses provides a mock function with given fields: pubkey, ipVersion, n
func (_m *IDb) GetNMostRecentMixStatuses(pubkey string, ipVersion string, n int) []models.PersistedMixStatus {
	ret := _m.Called(pubkey, ipVersion, n)

	var r0 []models.PersistedMixStatus
	if rf, ok := ret.Get(0).(func(string, string, int) []models.PersistedMixStatus); ok {
		r0 = rf(pubkey, ipVersion, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PersistedMixStatus)
		}
	}

	return r0
}

// GetNodeMixHost provides a mock function with given fields: pubkey
func (_m *IDb) GetNodeMixHost(pubkey string) string {
	ret := _m.Called(pubkey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pubkey)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IpExists provides a mock function with given fields: ip
func (_m *IDb) IpExists(ip string) bool {
	ret := _m.Called(ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListMixStatus provides a mock function with given fields: pubkey, limit
func (_m *IDb) ListMixStatus(pubkey string, limit int) []models.PersistedMixStatus {
	ret := _m.Called(pubkey, limit)

	var r0 []models.PersistedMixStatus
	if rf, ok := ret.Get(0).(func(string, int) []models.PersistedMixStatus); ok {
		r0 = rf(pubkey, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PersistedMixStatus)
		}
	}

	return r0
}

// ListMixStatusDateRange provides a mock function with given fields: pubkey, ipVersion, start, end
func (_m *IDb) ListMixStatusDateRange(pubkey string, ipVersion string, start int64, end int64) []models.PersistedMixStatus {
	ret := _m.Called(pubkey, ipVersion, start, end)

	var r0 []models.PersistedMixStatus
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) []models.PersistedMixStatus); ok {
		r0 = rf(pubkey, ipVersion, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PersistedMixStatus)
		}
	}

	return r0
}

// ListMixStatusSinceWithLimit provides a mock function with given fields: pubkey, ipVersion, since, limit
func (_m *IDb) ListMixStatusSinceWithLimit(pubkey string, ipVersion string, since int64, limit int) []models.PersistedMixStatus {
	ret := _m.Called(pubkey, ipVersion, since, limit)

	var r0 []models.PersistedMixStatus
	if rf, ok := ret.Get(0).(func(string, string, int64, int) []models.PersistedMixStatus); ok {
		r0 = rf(pubkey, ipVersion, since, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PersistedMixStatus)
		}
	}

	return r0
}

// LoadNonStaleReports provides a mock function with given fields:
func (_m *IDb) LoadNonStaleReports() models.BatchMixStatusReport {
	ret := _m.Called()

	var r0 models.BatchMixStatusReport
	if rf, ok := ret.Get(0).(func() models.BatchMixStatusReport); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.BatchMixStatusReport)
	}

	return r0
}

// LoadReport provides a mock function with given fields: pubkey
func (_m *IDb) LoadReport(pubkey string) models.MixStatusReport {
	ret := _m.Called(pubkey)

	var r0 models.MixStatusReport
	if rf, ok := ret.Get(0).(func(string) models.MixStatusReport); ok {
		r0 = rf(pubkey)
	} else {
		r0 = ret.Get(0).(models.MixStatusReport)
	}

	return r0
}

// MoveToRemovedSet provides a mock function with given fields: pubkey
func (_m *IDb) MoveToRemovedSet(pubkey string) {
	_m.Called(pubkey)
}

// RegisterGateway provides a mock function with given fields: gateway
func (_m *IDb) RegisterGateway(gateway models.RegisteredGateway) {
	_m.Called(gateway)
}

// RegisterMix provides a mock function with given fields: mix
func (_m *IDb) RegisterMix(mix models.RegisteredMix) {
	_m.Called(mix)
}

// RemoveOldStatuses provides a mock function with given fields: before
func (_m *IDb) RemoveOldStatuses(before int64) {
	_m.Called(before)
}

// RemovedTopology provides a mock function with given fields:
func (_m *IDb) RemovedTopology() models.Topology {
	ret := _m.Called()

	var r0 models.Topology
	if rf, ok := ret.Get(0).(func() models.Topology); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Topology)
	}

	return r0
}

// SaveBatchMixStatusReport provides a mock function with given fields: _a0
func (_m *IDb) SaveBatchMixStatusReport(_a0 models.BatchMixStatusReport) {
	_m.Called(_a0)
}

// SaveMixStatusReport provides a mock function with given fields: _a0
func (_m *IDb) SaveMixStatusReport(_a0 models.MixStatusReport) {
	_m.Called(_a0)
}

// SetReputation provides a mock function with given fields: id, newRep
func (_m *IDb) SetReputation(id string, newRep int64) bool {
	ret := _m.Called(id, newRep)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int64) bool); ok {
		r0 = rf(id, newRep)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Topology provides a mock function with given fields:
func (_m *IDb) Topology() models.Topology {
	ret := _m.Called()

	var r0 models.Topology
	if rf, ok := ret.Get(0).(func() models.Topology); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Topology)
	}

	return r0
}

// UnregisterNode provides a mock function with given fields: id
func (_m *IDb) UnregisterNode(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateReputation provides a mock function with given fields: id, repIncrease
func (_m *IDb) UpdateReputation(id string, repIncrease int64) bool {
	ret := _m.Called(id, repIncrease)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int64) bool); ok {
		r0 = rf(id, repIncrease)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
